// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Task struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Assignee             string   `protobuf:"bytes,2,opt,name=Assignee,proto3" json:"Assignee,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	Deadline             string   `protobuf:"bytes,4,opt,name=Deadline,proto3" json:"Deadline,omitempty"`
	Done                 bool     `protobuf:"varint,5,opt,name=Done,proto3" json:"Done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{0}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetAssignee() string {
	if m != nil {
		return m.Assignee
	}
	return ""
}

func (m *Task) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Task) GetDeadline() string {
	if m != nil {
		return m.Deadline
	}
	return ""
}

func (m *Task) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type TaskId struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskId) Reset()         { *m = TaskId{} }
func (m *TaskId) String() string { return proto.CompactTextString(m) }
func (*TaskId) ProtoMessage()    {}
func (*TaskId) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{1}
}

func (m *TaskId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskId.Unmarshal(m, b)
}
func (m *TaskId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskId.Marshal(b, m, deterministic)
}
func (m *TaskId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskId.Merge(m, src)
}
func (m *TaskId) XXX_Size() int {
	return xxx_messageInfo_TaskId.Size(m)
}
func (m *TaskId) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskId.DiscardUnknown(m)
}

var xxx_messageInfo_TaskId proto.InternalMessageInfo

func (m *TaskId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Tasks struct {
	Tasks                []*Task  `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tasks) Reset()         { *m = Tasks{} }
func (m *Tasks) String() string { return proto.CompactTextString(m) }
func (*Tasks) ProtoMessage()    {}
func (*Tasks) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{2}
}

func (m *Tasks) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tasks.Unmarshal(m, b)
}
func (m *Tasks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tasks.Marshal(b, m, deterministic)
}
func (m *Tasks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tasks.Merge(m, src)
}
func (m *Tasks) XXX_Size() int {
	return xxx_messageInfo_Tasks.Size(m)
}
func (m *Tasks) XXX_DiscardUnknown() {
	xxx_messageInfo_Tasks.DiscardUnknown(m)
}

var xxx_messageInfo_Tasks proto.InternalMessageInfo

func (m *Tasks) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type Status struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{3}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*Task)(nil), "proto.Task")
	proto.RegisterType((*TaskId)(nil), "proto.TaskId")
	proto.RegisterType((*Tasks)(nil), "proto.Tasks")
	proto.RegisterType((*Status)(nil), "proto.Status")
}

func init() { proto.RegisterFile("task.proto", fileDescriptor_ce5d8dd45b4a91ff) }

var fileDescriptor_ce5d8dd45b4a91ff = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xcd, 0x4a, 0xfb, 0x40,
	0x14, 0xc5, 0x49, 0xd2, 0x0c, 0xed, 0xcd, 0xff, 0xdf, 0xc5, 0x45, 0xca, 0x10, 0x17, 0xc6, 0x2c,
	0x24, 0xb8, 0x48, 0xa1, 0x05, 0xf7, 0x85, 0x6a, 0xc9, 0xa2, 0x2e, 0x62, 0x7d, 0x80, 0x29, 0x73,
	0x8d, 0xa1, 0x31, 0x29, 0x9d, 0x29, 0xe8, 0xe3, 0xf9, 0x66, 0x32, 0x93, 0x46, 0x82, 0x0b, 0x3f,
	0x56, 0x33, 0x3f, 0xce, 0x3d, 0xf7, 0x83, 0x03, 0xa0, 0x85, 0xda, 0xa5, 0xfb, 0x43, 0xa3, 0x1b,
	0xf4, 0xed, 0x13, 0x9e, 0x17, 0x4d, 0x53, 0x54, 0x34, 0xb5, 0xb4, 0x3d, 0x3e, 0x4d, 0xe9, 0x65,
	0xaf, 0xdf, 0xda, 0x9a, 0xf8, 0x15, 0x06, 0x1b, 0xa1, 0x76, 0x38, 0x06, 0x37, 0x93, 0xdc, 0x89,
	0x9c, 0xc4, 0xcb, 0xdd, 0x4c, 0x62, 0x08, 0xc3, 0x85, 0x52, 0x65, 0x51, 0x13, 0x71, 0x37, 0x72,
	0x92, 0x51, 0xfe, 0xc9, 0x78, 0x06, 0xfe, 0xa6, 0xd4, 0x15, 0x71, 0xcf, 0x0a, 0x2d, 0x18, 0xc7,
	0x92, 0x84, 0xac, 0xca, 0x9a, 0xf8, 0xa0, 0x75, 0x74, 0x8c, 0x08, 0x83, 0x65, 0x53, 0x13, 0xf7,
	0x23, 0x27, 0x19, 0xe6, 0xf6, 0x1f, 0x73, 0x60, 0x66, 0x72, 0x26, 0xbf, 0xce, 0x8e, 0xaf, 0xc1,
	0x37, 0x8a, 0xc2, 0x4b, 0xf0, 0xcd, 0x39, 0x8a, 0x3b, 0x91, 0x97, 0x04, 0xb3, 0xa0, 0xdd, 0x39,
	0x35, 0x62, 0xde, 0x2a, 0x71, 0x04, 0xec, 0x41, 0x0b, 0x7d, 0x54, 0x38, 0x01, 0xa6, 0xec, 0xcf,
	0x76, 0x1a, 0xe5, 0x27, 0x9a, 0xbd, 0xbb, 0x10, 0x18, 0xc7, 0x5a, 0xd4, 0xa2, 0xa0, 0x03, 0x5e,
	0x80, 0xb7, 0x90, 0x12, 0xfb, 0xcd, 0xc2, 0x3e, 0x60, 0x0c, 0xec, 0x71, 0x2f, 0x85, 0xa6, 0x6f,
	0x6a, 0x12, 0x18, 0xae, 0xc5, 0x8e, 0xcc, 0x21, 0xf8, 0xbf, 0x27, 0x64, 0x32, 0xec, 0xf0, 0xb4,
	0xd6, 0x15, 0xb0, 0x25, 0x55, 0xa4, 0x7f, 0xaa, 0x4b, 0x81, 0xad, 0x48, 0x2f, 0xaa, 0x0a, 0x27,
	0x69, 0x1b, 0x58, 0xda, 0x05, 0x96, 0xde, 0x9a, 0xc0, 0xc2, 0x7f, 0x3d, 0xbf, 0xc2, 0x39, 0x04,
	0x2b, 0xd2, 0x77, 0x65, 0x5d, 0xaa, 0x67, 0x92, 0xbf, 0x34, 0xdd, 0xc0, 0x78, 0x45, 0xfa, 0xbe,
	0xf9, 0xa3, 0x6f, 0xcb, 0x2c, 0xcc, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xfa, 0xcb, 0x16,
	0x5e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TaskManagerClient is the client API for TaskManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskManagerClient interface {
	Add(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	Update(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	MakeDone(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Status, error)
	Delete(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Status, error)
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Tasks, error)
	GetFinished(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Tasks, error)
	GetNotFinished(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Tasks, error)
}

type taskManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskManagerClient(cc grpc.ClientConnInterface) TaskManagerClient {
	return &taskManagerClient{cc}
}

func (c *taskManagerClient) Add(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/proto.TaskManager/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) Update(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/proto.TaskManager/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) MakeDone(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/proto.TaskManager/MakeDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) Delete(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/proto.TaskManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, "/proto.TaskManager/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) GetFinished(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, "/proto.TaskManager/GetFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) GetNotFinished(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, "/proto.TaskManager/GetNotFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskManagerServer is the server API for TaskManager service.
type TaskManagerServer interface {
	Add(context.Context, *Task) (*Task, error)
	Update(context.Context, *Task) (*Task, error)
	MakeDone(context.Context, *TaskId) (*Status, error)
	Delete(context.Context, *TaskId) (*Status, error)
	GetAll(context.Context, *empty.Empty) (*Tasks, error)
	GetFinished(context.Context, *empty.Empty) (*Tasks, error)
	GetNotFinished(context.Context, *empty.Empty) (*Tasks, error)
}

// UnimplementedTaskManagerServer can be embedded to have forward compatible implementations.
type UnimplementedTaskManagerServer struct {
}

func (*UnimplementedTaskManagerServer) Add(ctx context.Context, req *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedTaskManagerServer) Update(ctx context.Context, req *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedTaskManagerServer) MakeDone(ctx context.Context, req *TaskId) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDone not implemented")
}
func (*UnimplementedTaskManagerServer) Delete(ctx context.Context, req *TaskId) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedTaskManagerServer) GetAll(ctx context.Context, req *empty.Empty) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedTaskManagerServer) GetFinished(ctx context.Context, req *empty.Empty) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinished not implemented")
}
func (*UnimplementedTaskManagerServer) GetNotFinished(ctx context.Context, req *empty.Empty) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotFinished not implemented")
}

func RegisterTaskManagerServer(s *grpc.Server, srv TaskManagerServer) {
	s.RegisterService(&_TaskManager_serviceDesc, srv)
}

func _TaskManager_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskManager/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).Add(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskManager/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).Update(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_MakeDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).MakeDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskManager/MakeDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).MakeDone(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).Delete(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskManager/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).GetAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_GetFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).GetFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskManager/GetFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).GetFinished(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_GetNotFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).GetNotFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TaskManager/GetNotFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).GetNotFinished(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TaskManager",
	HandlerType: (*TaskManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _TaskManager_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TaskManager_Update_Handler,
		},
		{
			MethodName: "MakeDone",
			Handler:    _TaskManager_MakeDone_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TaskManager_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _TaskManager_GetAll_Handler,
		},
		{
			MethodName: "GetFinished",
			Handler:    _TaskManager_GetFinished_Handler,
		},
		{
			MethodName: "GetNotFinished",
			Handler:    _TaskManager_GetNotFinished_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
